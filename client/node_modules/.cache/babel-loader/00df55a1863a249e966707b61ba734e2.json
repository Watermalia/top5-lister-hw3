{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    itemActive: false,\n    listMarkedForDeletion: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // CREATE NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: payload.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // LIST UPDATE OF ITS NAME\n\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: true,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n\n  store.createNewList = function () {\n    // Initialize a basic Untitled list\n    let newList = {\n      \"name\": \"Untitled\" + store.newListCounter,\n      \"items\": [\"?\", \"?\", \"?\", \"?\", \"?\"]\n    }; // Send the list to the axios api to create the new untitled list\n\n    async function asyncCreateNewList() {\n      let response = await api.createTop5List(newList);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        let newIdNamePairs = store.idNamePairs;\n        let newPair = [top5List._id, top5List.name];\n        newIdNamePairs.push(newPair);\n        console.log(store.idNamePairs);\n        console.log(newIdNamePairs);\n        let newNewListCounter = store.newListCounter + 1;\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: {\n            idNamePairs: newIdNamePairs,\n            newListCounter: newNewListCounter\n          }\n        });\n        console.log(store.idNamePairs);\n        store.setCurrentList(top5List._id);\n      } else {\n        console.log(\"API FAILED TO CREATE A LIST\");\n      }\n    }\n\n    asyncCreateNewList();\n  }; // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        top5List.name = newName;\n\n        async function updateList(top5List) {\n          response = await api.updateTop5ListById(top5List._id, top5List);\n\n          if (response.data.success) {\n            async function getListPairs(top5List) {\n              response = await api.getTop5ListPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    top5List: top5List\n                  }\n                });\n              }\n            }\n\n            getListPairs(top5List);\n          }\n        }\n\n        updateList(top5List);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getTop5ListPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: top5List\n          });\n          store.history.push(\"/top5list/\" + top5List._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.addMoveItemTransaction = function (start, end) {\n    let transaction = new MoveItem_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  store.moveItem = function (start, end) {\n    start -= 1;\n    end -= 1;\n\n    if (start < end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i < end; i++) {\n        store.currentList.items[i] = store.currentList.items[i + 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } else if (start > end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i > end; i--) {\n        store.currentList.items[i] = store.currentList.items[i - 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } // NOW MAKE IT OFFICIAL\n\n\n    store.updateCurrentList();\n  };\n\n  store.updateCurrentList = function () {\n    async function asyncUpdateCurrentList() {\n      const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n    }\n\n    asyncUpdateCurrentList();\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"GdrgqzQdrFCovFE76xEv/VMPDOE=\");","map":{"version":3,"sources":["E:/Dropbox/Homework/CSE 316/Top5Lists_HW3/Top5Lists_HW3/client/src/store/index.js"],"names":["createContext","useState","jsTPS","api","MoveItem_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","itemActive","listMarkedForDeletion","storeReducer","action","type","payload","CREATE_NEW_LIST","isListNameEditActive","isItemEditActive","top5List","createNewList","newList","asyncCreateNewList","response","createTop5List","data","success","newIdNamePairs","newPair","_id","name","push","console","log","newNewListCounter","setCurrentList","changeListName","id","newName","asyncChangeListName","getTop5ListById","updateList","updateTop5ListById","getListPairs","getTop5ListPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","asyncSetCurrentList","history","addMoveItemTransaction","start","end","transaction","addTransaction","moveItem","temp","items","i","updateCurrentList","asyncUpdateCurrentList","undo","undoTransaction","redo","doTransaction","setIsListNameEditActive"],"mappings":"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","sourcesContent":["import { createContext, useState } from 'react'\r\nimport jsTPS from '../common/jsTPS'\r\nimport api from '../api'\r\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\r\nexport const GlobalStoreContext = createContext({});\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\r\n}\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nexport const useGlobalStore = () => {\r\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n    const [store, setStore] = useState({\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n        itemActive: false,\r\n        listMarkedForDeletion: null\r\n    });\r\n\r\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n    // HANDLE EVERY TYPE OF STATE CHANGE\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            // CREATE NEW LIST\r\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: payload.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // LIST UPDATE OF ITS NAME\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.top5List,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // STOP EDITING THE CURRENT LIST\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                })\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // UPDATE A LIST\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // START EDITING A LIST NAME\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: true,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            default:\r\n                return store;\r\n        }\r\n    }\r\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \r\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n    store.createNewList = function () {\r\n\r\n        // Initialize a basic Untitled list\r\n        let newList = {\r\n            \"name\": \"Untitled\" + store.newListCounter,\r\n            \"items\": [\r\n                \"?\",\r\n                \"?\",\r\n                \"?\",\r\n                \"?\",\r\n                \"?\"\r\n            ]\r\n        };\r\n\r\n        // Send the list to the axios api to create the new untitled list\r\n        async function asyncCreateNewList() {\r\n            let response = await api.createTop5List(newList);\r\n            if(response.data.success) {\r\n                let top5List = response.data.top5List;\r\n                let newIdNamePairs = store.idNamePairs;\r\n                let newPair = [top5List._id, top5List.name]\r\n                newIdNamePairs.push(newPair);\r\n                console.log(store.idNamePairs);\r\n                console.log(newIdNamePairs);\r\n                \r\n                let newNewListCounter = store.newListCounter + 1;\r\n\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\r\n                    payload: {\r\n                        idNamePairs: newIdNamePairs,\r\n                        newListCounter: newNewListCounter\r\n                    }\r\n                });\r\n                console.log(store.idNamePairs);\r\n                store.setCurrentList(top5List._id);\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO CREATE A LIST\");\r\n            }\r\n        }\r\n        asyncCreateNewList();\r\n    }\r\n\r\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n    store.changeListName = function (id, newName) {\r\n        // GET THE LIST\r\n        async function asyncChangeListName(id) {\r\n            let response = await api.getTop5ListById(id);\r\n            if (response.data.success) {\r\n                let top5List = response.data.top5List;\r\n                top5List.name = newName;\r\n                async function updateList(top5List) {\r\n                    response = await api.updateTop5ListById(top5List._id, top5List);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(top5List) {\r\n                            response = await api.getTop5ListPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        top5List: top5List\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(top5List);\r\n                    }\r\n                }\r\n                updateList(top5List);\r\n            }\r\n        }\r\n        asyncChangeListName(id);\r\n    }\r\n\r\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n    store.closeCurrentList = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {}\r\n        });\r\n    }\r\n\r\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n    store.loadIdNamePairs = function () {\r\n        async function asyncLoadIdNamePairs() {\r\n            const response = await api.getTop5ListPairs();\r\n            if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                    payload: pairsArray\r\n                });\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncLoadIdNamePairs();\r\n    }\r\n\r\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\r\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\r\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\r\n    // moveItem, updateItem, updateCurrentList, undo, and redo\r\n    store.setCurrentList = function (id) {\r\n        async function asyncSetCurrentList(id) {\r\n            let response = await api.getTop5ListById(id);\r\n            if (response.data.success) {\r\n                let top5List = response.data.top5List;\r\n\r\n                response = await api.updateTop5ListById(top5List._id, top5List);\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: top5List\r\n                    });\r\n                    store.history.push(\"/top5list/\" + top5List._id);\r\n                }\r\n            }\r\n        }\r\n        asyncSetCurrentList(id);\r\n    }\r\n    store.addMoveItemTransaction = function (start, end) {\r\n        let transaction = new MoveItem_Transaction(store, start, end);\r\n        tps.addTransaction(transaction);\r\n    }\r\n    store.moveItem = function (start, end) {\r\n        start -= 1;\r\n        end -= 1;\r\n        if (start < end) {\r\n            let temp = store.currentList.items[start];\r\n            for (let i = start; i < end; i++) {\r\n                store.currentList.items[i] = store.currentList.items[i + 1];\r\n            }\r\n            store.currentList.items[end] = temp;\r\n        }\r\n        else if (start > end) {\r\n            let temp = store.currentList.items[start];\r\n            for (let i = start; i > end; i--) {\r\n                store.currentList.items[i] = store.currentList.items[i - 1];\r\n            }\r\n            store.currentList.items[end] = temp;\r\n        }\r\n\r\n        // NOW MAKE IT OFFICIAL\r\n        store.updateCurrentList();\r\n    }\r\n    store.updateCurrentList = function() {\r\n        async function asyncUpdateCurrentList() {\r\n            const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\r\n            if (response.data.success) {\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                    payload: store.currentList\r\n                });\r\n            }\r\n        }\r\n        asyncUpdateCurrentList();\r\n    }\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n    }\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n    store.setIsListNameEditActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n\r\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\r\n    return { store, storeReducer };\r\n}"]},"metadata":{},"sourceType":"module"}