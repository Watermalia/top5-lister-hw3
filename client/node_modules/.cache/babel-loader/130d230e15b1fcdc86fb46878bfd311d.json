{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction';\nimport ChangeItem_Transaction from '../transactions/ChangeItem_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DEL: \"MARK_LIST_FOR_DEL\",\n  DELETE_MARKED_LIST: \"DELETE_MARKED_LIST\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    itemActive: false,\n    listMarkedForDeletion: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: true,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING AN ITEM\n\n      case GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: true,\n            listMarkedForDeletion: null\n          });\n        }\n      // MARK A LIST FOR DELETION\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DEL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: payload\n          });\n        }\n      // DELETE THE MARKED LIST\n\n      case GlobalStoreActionType.DELETE_MARKED_LIST:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n\n  store.createNewList = function () {\n    // Initialize a basic Untitled list\n    let newList = {\n      \"name\": \"Untitled\" + store.newListCounter,\n      \"items\": [\"?\", \"?\", \"?\", \"?\", \"?\"]\n    }; // Send the list to the axios api to create the new untitled list\n\n    async function asyncCreateNewList() {\n      let response = await api.createTop5List(newList);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List; // Increment the store's newListCounter\n\n        store.newListCounter += 1; // Open the new list's editing page\n\n        store.setCurrentList(top5List._id);\n      } else {\n        console.log(\"API FAILED TO CREATE A LIST\");\n      }\n    }\n\n    asyncCreateNewList();\n  }; // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        top5List.name = newName;\n\n        async function updateList(top5List) {\n          response = await api.updateTop5ListById(top5List._id, top5List);\n\n          if (response.data.success) {\n            async function getListPairs(top5List) {\n              response = await api.getTop5ListPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    top5List: top5List\n                  }\n                });\n              }\n            }\n\n            getListPairs(top5List);\n          }\n        }\n\n        updateList(top5List);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESS CHANGING AN ITEM NAME\n\n\n  store.changeItemName = function (index, newName) {\n    store.currentList.items[index] = newName;\n    store.updateCurrentList();\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getTop5ListPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: top5List\n          });\n          store.history.push(\"/top5list/\" + top5List._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.addMoveItemTransaction = function (start, end) {\n    let transaction = new MoveItem_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  store.moveItem = function (start, end) {\n    start -= 1;\n    end -= 1;\n\n    if (start < end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i < end; i++) {\n        store.currentList.items[i] = store.currentList.items[i + 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } else if (start > end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i > end; i--) {\n        store.currentList.items[i] = store.currentList.items[i - 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } // NOW MAKE IT OFFICIAL\n\n\n    store.updateCurrentList();\n  };\n\n  store.addChangeItemTransaction = function (index, newName) {\n    let transaction = new ChangeItem_Transaction(store, index, store.currentList.items[index], newName);\n    tps.addTransaction(transaction);\n  };\n\n  store.changeItem = function (index, newName) {\n    store.currentList.items[index] = newName;\n    store.updateCurrentList();\n  };\n\n  store.updateCurrentList = function () {\n    async function asyncUpdateCurrentList() {\n      const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n    }\n\n    asyncUpdateCurrentList();\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  store.setIsItemEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  store.showDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n\n  store.hideDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n\n  store.markListForDeletion = function (id) {\n    let markedList = null;\n\n    for (let i = 0; i < store.idNamePairs.length; i++) {\n      if (store.idNamePairs[i]._id === id) {\n        markedList = store.idNamePairs[i];\n      }\n    }\n\n    console.log(markedList);\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DEL,\n      payload: markedList\n    });\n    console.log(store.listMarkedForDeletion);\n  };\n\n  store.deleteMarkedList = function () {\n    async function asyncDeleteMarkedList() {\n      let response = await api.deleteTop5ListById(store.listMarkedForDeletion._id);\n\n      if (response.data.success) {\n        store.loadIdNamePairs();\n        store.hideDeleteListModal();\n      }\n    }\n\n    asyncDeleteMarkedList();\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"GdrgqzQdrFCovFE76xEv/VMPDOE=\");","map":{"version":3,"sources":["E:/Dropbox/Homework/CSE 316/Top5Lists_HW3/Top5Lists_HW3/client/src/store/index.js"],"names":["createContext","useState","jsTPS","api","MoveItem_Transaction","ChangeItem_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_LIST_FOR_DEL","DELETE_MARKED_LIST","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","itemActive","listMarkedForDeletion","storeReducer","action","type","payload","top5List","isListNameEditActive","isItemEditActive","SET_ITEM_EDIT_ACTIVE","createNewList","newList","asyncCreateNewList","response","createTop5List","data","success","setCurrentList","_id","console","log","changeListName","id","newName","asyncChangeListName","getTop5ListById","name","updateList","updateTop5ListById","getListPairs","getTop5ListPairs","pairsArray","changeItemName","index","items","updateCurrentList","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","asyncSetCurrentList","history","push","addMoveItemTransaction","start","end","transaction","addTransaction","moveItem","temp","i","addChangeItemTransaction","changeItem","asyncUpdateCurrentList","undo","undoTransaction","redo","doTransaction","setIsListNameEditActive","setIsItemEditActive","showDeleteListModal","modal","document","getElementById","classList","add","hideDeleteListModal","remove","markListForDeletion","markedList","length","deleteMarkedList","asyncDeleteMarkedList","deleteTop5ListById"],"mappings":"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","sourcesContent":["import { createContext, useState } from 'react'\r\nimport jsTPS from '../common/jsTPS'\r\nimport api from '../api'\r\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\r\nimport ChangeItem_Transaction from '../transactions/ChangeItem_Transaction'\r\nexport const GlobalStoreContext = createContext({});\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\r\n    MARK_LIST_FOR_DEL: \"MARK_LIST_FOR_DEL\",\r\n    DELETE_MARKED_LIST: \"DELETE_MARKED_LIST\"\r\n}\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nexport const useGlobalStore = () => {\r\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n    const [store, setStore] = useState({\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n        itemActive: false,\r\n        listMarkedForDeletion: null\r\n    });\r\n\r\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n    // HANDLE EVERY TYPE OF STATE CHANGE\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            // LIST UPDATE OF ITS NAME\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.top5List,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // STOP EDITING THE CURRENT LIST\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                })\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // UPDATE A LIST\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // START EDITING A LIST NAME\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: true,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // START EDITING AN ITEM\r\n            case GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: true,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // MARK A LIST FOR DELETION\r\n            case GlobalStoreActionType.MARK_LIST_FOR_DEL: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: payload\r\n                });\r\n            }\r\n            // DELETE THE MARKED LIST\r\n            case GlobalStoreActionType.DELETE_MARKED_LIST: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            default:\r\n                return store;\r\n        }\r\n    }\r\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \r\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n    store.createNewList = function () {\r\n\r\n        // Initialize a basic Untitled list\r\n        let newList = {\r\n            \"name\": \"Untitled\" + store.newListCounter,\r\n            \"items\": [\r\n                \"?\",\r\n                \"?\",\r\n                \"?\",\r\n                \"?\",\r\n                \"?\"\r\n            ]\r\n        };\r\n\r\n        // Send the list to the axios api to create the new untitled list\r\n        async function asyncCreateNewList() {\r\n            \r\n            let response = await api.createTop5List(newList);\r\n            if(response.data.success) {\r\n                let top5List = response.data.top5List;\r\n                \r\n                // Increment the store's newListCounter\r\n                store.newListCounter += 1;\r\n\r\n                // Open the new list's editing page\r\n                store.setCurrentList(top5List._id);\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO CREATE A LIST\");\r\n            }\r\n        }\r\n        asyncCreateNewList();\r\n    }\r\n\r\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n    store.changeListName = function (id, newName) {\r\n        // GET THE LIST\r\n        async function asyncChangeListName(id) {\r\n            let response = await api.getTop5ListById(id);\r\n            if (response.data.success) {\r\n                let top5List = response.data.top5List;\r\n                top5List.name = newName;\r\n                async function updateList(top5List) {\r\n                    response = await api.updateTop5ListById(top5List._id, top5List);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(top5List) {\r\n                            response = await api.getTop5ListPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        top5List: top5List\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(top5List);\r\n                    }\r\n                }\r\n                updateList(top5List);\r\n            }\r\n        }\r\n        asyncChangeListName(id);\r\n    }\r\n\r\n    // THIS FUNCTION PROCESS CHANGING AN ITEM NAME\r\n    store.changeItemName = function (index, newName) {\r\n\r\n        store.currentList.items[index] = newName;\r\n        store.updateCurrentList();\r\n    }\r\n\r\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n    store.closeCurrentList = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {}\r\n        });\r\n    }\r\n\r\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n    store.loadIdNamePairs = function () {\r\n        async function asyncLoadIdNamePairs() {\r\n            const response = await api.getTop5ListPairs();\r\n            if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                    payload: pairsArray\r\n                });\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncLoadIdNamePairs();\r\n    }\r\n\r\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\r\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\r\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\r\n    // moveItem, updateItem, updateCurrentList, undo, and redo\r\n    store.setCurrentList = function (id) {\r\n        async function asyncSetCurrentList(id) {\r\n            let response = await api.getTop5ListById(id);\r\n            if (response.data.success) {\r\n                let top5List = response.data.top5List;\r\n\r\n                response = await api.updateTop5ListById(top5List._id, top5List);\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: top5List\r\n                    });\r\n                    store.history.push(\"/top5list/\" + top5List._id);\r\n                }\r\n            }\r\n        }\r\n        asyncSetCurrentList(id);\r\n    }\r\n\r\n    store.addMoveItemTransaction = function (start, end) {\r\n        let transaction = new MoveItem_Transaction(store, start, end);\r\n        tps.addTransaction(transaction);\r\n    }\r\n    store.moveItem = function (start, end) {\r\n        start -= 1;\r\n        end -= 1;\r\n        if (start < end) {\r\n            let temp = store.currentList.items[start];\r\n            for (let i = start; i < end; i++) {\r\n                store.currentList.items[i] = store.currentList.items[i + 1];\r\n            }\r\n            store.currentList.items[end] = temp;\r\n        }\r\n        else if (start > end) {\r\n            let temp = store.currentList.items[start];\r\n            for (let i = start; i > end; i--) {\r\n                store.currentList.items[i] = store.currentList.items[i - 1];\r\n            }\r\n            store.currentList.items[end] = temp;\r\n        }\r\n\r\n        // NOW MAKE IT OFFICIAL\r\n        store.updateCurrentList();\r\n    }\r\n\r\n    store.addChangeItemTransaction = function (index, newName) {\r\n        let transaction = new ChangeItem_Transaction(store, index, store.currentList.items[index], newName);\r\n        tps.addTransaction(transaction);\r\n    }\r\n    store.changeItem = function (index, newName) {\r\n        store.currentList.items[index] = newName;\r\n        store.updateCurrentList();\r\n    }\r\n    store.updateCurrentList = function() {\r\n        async function asyncUpdateCurrentList() {\r\n            const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\r\n            if (response.data.success) {\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                    payload: store.currentList\r\n                });\r\n            }\r\n        }\r\n        asyncUpdateCurrentList();\r\n    }\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n    }\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n    store.setIsListNameEditActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n\r\n    store.setIsItemEditActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n\r\n    store.showDeleteListModal = function () {\r\n        let modal = document.getElementById(\"delete-modal\");\r\n        modal.classList.add(\"is-visible\");\r\n    }\r\n\r\n    store.hideDeleteListModal = function () {\r\n        let modal = document.getElementById(\"delete-modal\");\r\n        modal.classList.remove(\"is-visible\");\r\n    }\r\n\r\n    store.markListForDeletion = function (id) {\r\n        let markedList = null;\r\n        for(let i = 0; i < store.idNamePairs.length; i++) {\r\n            if(store.idNamePairs[i]._id === id) {\r\n                markedList = store.idNamePairs[i];\r\n            }\r\n        }\r\n        console.log(markedList);\r\n        storeReducer({\r\n            type: GlobalStoreActionType.MARK_LIST_FOR_DEL,\r\n            payload: markedList\r\n        });\r\n        console.log(store.listMarkedForDeletion);\r\n    }\r\n\r\n    store.deleteMarkedList = function () {\r\n        async function asyncDeleteMarkedList () {\r\n            let response = await api.deleteTop5ListById(store.listMarkedForDeletion._id);\r\n            if (response.data.success) {\r\n                store.loadIdNamePairs();\r\n                store.hideDeleteListModal();\r\n            }\r\n        }\r\n        asyncDeleteMarkedList();\r\n    }\r\n\r\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\r\n    return { store, storeReducer };\r\n}"]},"metadata":{},"sourceType":"module"}